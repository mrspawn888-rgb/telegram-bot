import telebot
from telebot import types
import os
from flask import Flask
import threading

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN = os.getenv("BOT_TOKEN")
GROUP_CHAT_ID = os.getenv("GROUP_CHAT_ID")  # ID –≥—Ä—É–ø–ø—ã, –∫—É–¥–∞ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∑–∞–∫–∞–∑—ã
bot = telebot.TeleBot(TOKEN)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# --- –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç –∏ –∫–Ω–æ–ø–∫–∞ –°—Ç–∞—Ä—Ç ---
@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –°—Ç–∞—Ä—Ç
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    start_button = types.KeyboardButton("üöÄ –°—Ç–∞—Ä—Ç")
    keyboard.add(start_button)

    bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–°—Ç–∞—Ä—Ç', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ä—Ç"
@bot.message_handler(func=lambda message: message.text == "üöÄ –°—Ç–∞—Ä—Ç")
def handle_start_button(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:")
    user_data[chat_id] = {}
    bot.register_next_step_handler(message, get_name)

# –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é
def get_name(message):
    chat_id = message.chat.id
    user_data[chat_id]['name'] = message.text

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    button = types.KeyboardButton("üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)
    keyboard.add(button)

    bot.send_message(chat_id, "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:", reply_markup=keyboard)
    bot.register_next_step_handler(message, get_contact)

# –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç
@bot.message_handler(content_types=['contact'])
def get_contact(message):
    chat_id = message.chat.id
    if message.contact:
        user_data[chat_id]['phone'] = message.contact.phone_number

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        button = types.KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é", request_location=True)
        keyboard.add(button)

        bot.send_message(chat_id, "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –ª–æ–∫–∞—Ü–∏—é –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=keyboard)
        bot.register_next_step_handler(message, get_location)
    else:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞.")

# –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞—Ü–∏—é
@bot.message_handler(content_types=['location'])
def get_location(message):
    chat_id = message.chat.id
    if message.location:
        user_data[chat_id]['location'] = {
            'latitude': message.location.latitude,
            'longitude': message.location.longitude
        }
        main_menu(chat_id)
    else:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–∫–∞—Ü–∏–∏.")

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
def main_menu(chat_id):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)

    buttons = [
        "ü•ü –°–æ–º—Å–∞",
        "ü•Ø –°–¥–æ–±–Ω—ã–µ –±—É–ª–æ—á–∫–∏",
        "üç© –°–ª–∞–¥–∫–∏–µ –±—É–ª–æ—á–∫–∏",
        "üç™ –ò–∑ –ø–µ—Å–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å–ª–∞–¥–∫–æ–µ",
        "üç± –°–µ—Ç—ã",
        "ü•ó –°–∞–ª–∞—Ç—ã",
        "üç≤ –°—É–ø—ã",
        "ü•§ –ö–æ–º–ø–æ—Ç",
        "ü•õ –ù–∞–ø–∏—Ç–∫–∏"
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Å—Ç—Ä–æ–∫—É
    for i in range(0, len(buttons), 2):
        if i + 1 < len(buttons):
            keyboard.add(buttons[i], buttons[i + 1])
        else:
            keyboard.add(buttons[i])

    keyboard.add("üõí –ö–æ—Ä–∑–∏–Ω–∞", "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑")
    bot.send_message(chat_id, "–û—Ç–ª–∏—á–Ω–æ! –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
@bot.message_handler(func=lambda message: message.text in [
    "ü•ü –°–æ–º—Å–∞",
    "ü•Ø –°–¥–æ–±–Ω—ã–µ –±—É–ª–æ—á–∫–∏",
    "üç© –°–ª–∞–¥–∫–∏–µ –±—É–ª–æ—á–∫–∏",
    "üç™ –ò–∑ –ø–µ—Å–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å–ª–∞–¥–∫–æ–µ",
    "üç± –°–µ—Ç—ã",
    "ü•ó –°–∞–ª–∞—Ç—ã",
    "üç≤ –°—É–ø—ã",
    "ü•§ –ö–æ–º–ø–æ—Ç",
    "ü•õ –ù–∞–ø–∏—Ç–∫–∏"
])
def handle_category(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {message.text}\n–ó–¥–µ—Å—å —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è —Ç–æ–≤–∞—Ä—ã!")

# –ö–æ—Ä–∑–∏–Ω–∞
@bot.message_handler(func=lambda message: message.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
def show_cart(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞. üõçÔ∏è")

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
@bot.message_handler(func=lambda message: message.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑")
def finish_order(message):
    chat_id = message.chat.id
    if chat_id not in user_data or 'name' not in user_data[chat_id]:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    name = user_data[chat_id].get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    phone = user_data[chat_id].get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    location = user_data[chat_id].get('location', {})

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã
    group_message = (
        f"üÜï *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*\n\n"
        f"üë§ –ò–º—è: {name}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"üìç –õ–æ–∫–∞—Ü–∏—è: https://maps.google.com/?q={location.get('latitude')},{location.get('longitude')}"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
    bot.send_message(GROUP_CHAT_ID, group_message, parse_mode="Markdown")

    bot.send_message(chat_id, "–°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É. ‚úÖ")

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
def run_bot():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç...")
    bot.infinity_polling()

# === Flask —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ===
app = Flask(__name__)

@app.route('/')
def home():
    return "Bot is running!"

def run_flask():
    app.run(host='0.0.0.0', port=10000)

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∏ Flask –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
if __name__ == "__main__":
    threading.Thread(target=run_bot).start()
    threading.Thread(target=run_flask).start()



